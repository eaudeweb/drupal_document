<?php

/**
 * @file
 * Basic module file for drupal_document module.
 */

use Drupal\Core\Ajax\AjaxResponse;
use Drupal\Core\Ajax\OpenModalDialogCommand;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\StringTranslation\TranslatableMarkup;
use Drupal\Core\Url;
use Drupal\drupal_document\Form\DownloadDocumentsForm;
use Drupal\search_api\IndexInterface;
use Drupal\search_api\Item\Field;

/**
 * Implements hook_theme().
 */
function drupal_document_theme($existing, $type, $theme, $path) {
  return [
    'dropdown_file_language' => [
      'template' => 'dropdown-file-language',
      'variables' => ['items' => NULL, 'object' => NULL, 'attributes' => []],
    ],
    'files_group_by_language' => [
        'template' => 'files-group-by-language',
        'variables' => [
            'rows' => [],
            'current_language' => [],
        ],
    ],
    'download_modal' => [
      'template' => 'download-modal',
      'variables' => ['button' => NULL, 'object' => NULL, 'attributes' => []],
    ],
  ];
}

/**
 * Do not index langcode when file is not displayed.
 *
 * Implements hook_search_api_index_items_alter().
 */
function drupal_document_search_api_index_items_alter(IndexInterface $index, array &$items) {
  if (!\Drupal::moduleHandler()->moduleExists('search_api')) {
    return;
  }
  $solrField = 'file_language';
  /** @var \Drupal\search_api\Item\Item $item */
  foreach ($items as &$item) {
    /** @var \Drupal\search_api\Item\Field $languageField */
    $languageField = $item->getField($solrField);
    if (!$languageField instanceof Field) {
      return;
    }
    $langcodes = $languageField->getValues();
    $propertyPath = $item->getField($solrField)->getPropertyPath();
    $property = explode(':', $propertyPath);
    $fieldEntity = $property[0];
    $entity = $item->getOriginalObject()->getValue();
    if ($entity->hasField($fieldEntity)) {
      $values = $entity->get($fieldEntity)->getValue();
      foreach ($values as $value) {
        if (!$value['display']) {
          if (($key = array_search($value['language'], $langcodes)) !== FALSE) {
            unset($langcodes[$key]);
          }
        }
      }
      $languageField->setValues($langcodes);
      $item->setField($solrField, $languageField);
    }
  }
}

/**
 * Implements hook_form_alter().
 */
function drupal_document_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  $actionExist = FALSE;
  $bulkFormId = isset($form['views_bulk_operations_bulk_form']) ?
    'views_bulk_operations_bulk_form' : (isset($form['node_bulk_form']) ? 'node_bulk_form' : NULL);
  if (isset($form['views_bulk_operations_bulk_form'])) {
    $actionExist = array_search('node_download_documents_action', array_column($form['output'][0]['#view']->field['views_bulk_operations_bulk_form']->options['selected_actions'],'action_id'));
    $form['header']['views_bulk_operations_bulk_form']['actions'][0]['#ajax']['callback'] = '_drupal_document_node_download_documents_action';
  }
  if (isset($form['node_bulk_form'])) {
    $actionExist = array_search('node_download_documents_action', $form['output'][0]['#view']->field['node_bulk_form']->options['selected_actions']);
    $form['header']['node_bulk_form']['actions']['submit']['#ajax']['callback'] = '_drupal_document_node_download_documents_action';
  }
  if ($bulkFormId && is_int($actionExist)) {
    $form['#attached']['library'][] = 'drupal_document/documents_form';
    // Class used to count how many documents are selected.
    $form['#attributes']['class'][] = 'documents-bulk-form';
    // Button to clear the checked items.
    $form['header']['node_bulk_form']['actions']['clear'] = [
      '#type' => 'link',
      '#url' => Url::fromUserInput('#'),
      '#title' => t('clear'),
      '#attributes' => [
        'class' => ['download-documents-clear-button', 'hidden'],
      ],
      '#weight' => -100,
    ];
    // Changes for a specific view.
    if (strpos($form_id, 'views_form_index_documents_event_documents') === 0
      || strpos($form_id, 'views_form_paragraphs_grouped_ocuments') === 0) {
      $form['header'][$bulkFormId]['actions'][0]['#value'] = new TranslatableMarkup('No documents selected');
      $form['header'][$bulkFormId]['actions'][0]['#attributes']['disabled'] = 'disabled';
      $form['actions']['submit']['#value'] = new TranslatableMarkup('No documents selected');
      $form['actions']['submit']['#attributes']['disabled'] = 'disabled';
    }
  }
}

/**
 * Ajax callback to open a modal with files from all selected ids.
 */
function _drupal_document_node_download_documents_action(&$form, FormStateInterface $form_state) {
  $id = isset($form['views_bulk_operations_bulk_form']) ? 'views_bulk_operations_bulk_form' : 'node_bulk_form';
  $isSearchApi = isset($form['views_bulk_operations_bulk_form']);
  $encodedIds = $form_state->getUserInput()[$id];
  if ($encodedIds) {
    $ids = [];
    /** @var \Drupal\drupal_document\Services\DocumentsBulkManager $bulkManager */
    $bulkManager = \Drupal::service('document.bulk_manager');
    foreach (array_filter($form_state->getUserInput()[$id]) as $hash) {
      $entity = $bulkManager->loadEntityFromBulkFormKey($hash, $isSearchApi);
      $ids[] =  $entity->id();
    }

    $form = \Drupal::formBuilder()->getForm(DownloadDocumentsForm::class, $ids, 'field_files');
    $response = new AjaxResponse();
    $response->addCommand(new OpenModalDialogCommand(NULL, $form, [
      'height' => 600,
      'width' => 900,
      'dialogClass' => 'no-titlebar no-close',
    ]));

    return $response;
  }
}